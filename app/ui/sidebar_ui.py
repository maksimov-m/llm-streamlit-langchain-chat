import os
import streamlit as st
import tempfile
import json
import shutil
from utils import db_utils
from utils.file_processor_pipeline import FileProcessorPipeline, generate_descriptions_for_dones

from workflow.rag_workflow import RAGWorkflow


def render_sidebar():
    with st.sidebar:
        render_model_settings()
        render_chat_list()
        render_file_manager()

def render_model_settings():
    if st.session_state['workflow'] is None:
        st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
        model = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏", value=os.getenv("MODEL_NAME"))
        base_url = st.text_input("–ë–∞–∑–æ–≤—ã–π URL", value=os.getenv("API_URL"))
        api_key = st.text_input("API –∫–ª—é—á", value=os.getenv("API_KEY"), type="password")

        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
            os.environ["MODEL_NAME"] = model
            os.environ["MODEL_PROVIDER"] = st.session_state['params_RAG']['PROVIDER_API']
            os.environ["API_URL"] = base_url
            os.environ["API_KEY"] = api_key
            # Initialization
            if st.session_state['params_RAG']['PROVIDER_API'] == "openai":

                config_1 = {
                    'model': model,
                    'api_url': base_url,
                    'api_key': api_key
                }

                config_2 = {
                    'artifacts_path': st.session_state['params_RAG']['ARTIFACTS_PATH'],
                    'dataframe_path': st.session_state['params_RAG']['DATAFRAME_PATH'],
                    'embedding_model_name': st.session_state['params_RAG']['EMBEDDING_MODEL_NAME']
                }

                with st.spinner("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."):
                    workflow = RAGWorkflow(config_1, config_2)

                st.session_state['workflow'] = workflow
                st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                st.rerun()

            else:
                st.error("–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ –º–æ–¥–µ–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ openai")


def render_chat_list():
    if (st.session_state['workflow'] is not None and
            os.path.exists(st.session_state['params_RAG']['ARTIFACTS_PATH']) and
            len(os.listdir(st.session_state['params_RAG']['ARTIFACTS_PATH'])) > 0):

        if "d_descriptions_domens" not in st.session_state:
            with open(os.path.join(st.session_state['params_RAG']['ARTIFACTS_PATH'],
                                   st.session_state['params_RAG']["DESCRIPTION_ROUTER_PATH"]), "r") as f:
                st.session_state["d_descriptions_domens"] = json.load(f)

        st.header("–ß–∞—Ç—ã")
        st.session_state['chats'] = db_utils.get_chats()

        if st.button("‚ûï –ù–æ–≤—ã–π —á–∞—Ç"):
            new_chat_id = db_utils.create_new_chat()
            st.session_state['selected_chat_id'] = new_chat_id
            st.session_state['chats'] = db_utils.get_chats()

            show_chat_list()
            st.rerun()

        show_chat_list()


def show_chat_list():
    if st.session_state['chats'] is not None and len(st.session_state['chats']) > 0:
        chat_names = [chat[1] for chat in st.session_state['chats']]

        current_chat_id = st.session_state['selected_chat_id']
        default_index = 0

        if current_chat_id is not None:
            for i, chat in enumerate(st.session_state['chats']):
                if chat[0] == current_chat_id:
                    default_index = i
                    break
        selected_index = st.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
            options=range(len(chat_names)),
            format_func=lambda i: chat_names[i],
            index=default_index,
            key="chat_selector"
        )
        if isinstance(selected_index, int):
            new_selected_chat_id = st.session_state['chats'][selected_index][0]
        else:
            new_selected_chat_id = st.session_state['chats'][0][0]

        if current_chat_id != new_selected_chat_id:
            st.session_state['selected_chat_id'] = new_selected_chat_id
            st.rerun()
        else:
            st.session_state['selected_chat_id'] = new_selected_chat_id

        st.session_state['temperature'] = st.slider("Temperature", min_value=0.0, max_value=1.5, value=0.7, step=0.01)
    else:
        st.write("–£ –≤–∞—Å –Ω–µ—Ç —á–∞—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")


def render_file_manager():
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ file_manager –Ω–µ True
    if ((not os.path.exists(st.session_state['params_RAG']['ARTIFACTS_PATH']) or
            len(os.listdir(st.session_state['params_RAG']['ARTIFACTS_PATH'])) == 0) and
            st.session_state['workflow'] is not None and
            st.session_state.file_manager is None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        st.session_state.setdefault('uploaded_files', [])
        st.session_state.setdefault('process_complete', False)
        st.session_state.setdefault('last_result', None)

        # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        st.title("üìÅ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        st.text("–í–∞—à–∏ —Ñ–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf –∏–ª–∏ txt, –∞ —Ç–∞–∫–∂–µ –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –º–±.")
        st.text("–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")

        # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        with st.expander("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", expanded=True):
            uploaded_files = st.file_uploader(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã",
                accept_multiple_files=True,
                type=['pdf', 'txt'],
                label_visibility="collapsed"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            if uploaded_files:
                current_files = st.session_state.uploaded_files.copy()
                for new_file in uploaded_files:
                    if not any(f.name == new_file.name and f.size == new_file.size for f in current_files):
                        current_files.append(new_file)
                st.session_state.uploaded_files = current_files
                st.session_state.process_complete = False

        # –°–µ–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if st.session_state.uploaded_files and not st.session_state.process_complete:
            st.divider()
            if st.button("‚öôÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                         type="primary",
                         use_container_width=True):
                process_files_for_rag()
                # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã
                st.session_state.file_manager = True
                st.rerun()

        # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if st.session_state.process_complete and st.session_state.last_result:
            st.session_state.file_manager = True
            st.rerun()
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if (st.session_state['workflow'] is not None and
                st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã")):
            shutil.rmtree(st.session_state['params_RAG']['ARTIFACTS_PATH'])
            # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            st.session_state.uploaded_files = []
            st.session_state.process_complete = False
            st.session_state.file_manager = None
            st.session_state.last_result = None
            st.rerun()


def process_files_for_rag():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    # try:
    with tempfile.TemporaryDirectory() as tmp_dir:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        for uploaded_file in st.session_state.uploaded_files:
            file_path = os.path.join(tmp_dir, uploaded_file.name)
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥ —Å–≤–æ–∏ –Ω—É–∂–¥—ã)
        output_path = st.session_state['params_RAG']['ARTIFACTS_PATH']  # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è

        if not os.path.exists(output_path):
            os.makedirs(output_path)

        embedding_model_name = st.session_state['params_RAG']['EMBEDDING_MODEL_NAME']  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏

        with st.spinner("–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤..."):
            fileprocessor = FileProcessorPipeline(
                input_path=tmp_dir,
                output_path=output_path,
                embedding_model_name=embedding_model_name
            )

            df = fileprocessor.start_process()

            if df is not None:
                print(f"init_context_data for Retriever -> "
                      f"{st.session_state['workflow'].retriever.init_context_data()}")

                d_descriptions_domens = generate_descriptions_for_dones(df,
                    st.session_state['workflow'].base_generator.get_llm())

                with open(os.path.join(st.session_state['params_RAG']['ARTIFACTS_PATH'],
                                       st.session_state['params_RAG']["DESCRIPTION_ROUTER_PATH"]), "w") as f:
                    json.dump(d_descriptions_domens, f)

                st.session_state["d_descriptions_domens"] = d_descriptions_domens

                st.session_state.last_result = True

            if df is not None:
                st.sidebar.success("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
            else:
                st.sidebar.warning("–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

    if 'tmp_dir' in locals() and os.path.exists(tmp_dir):
        try:
            for f in os.listdir(tmp_dir):
                os.remove(os.path.join(tmp_dir, f))
            os.rmdir(tmp_dir)
        except Exception as cleanup_error:
            st.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {cleanup_error}")

    st.session_state.process_complete = True
